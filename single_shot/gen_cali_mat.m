camera_res_w = 1000;
camera_res_h = 1000;
camera_fov_deg_w = 15;
camera_fov_deg_h = 15;
CamRotateXDeg = -25;
CamRotateYDeg = -25;
proj_spacing = 1;
proj_num_x = 10;
proj_num_y = 10;
fn = 'calibration_parameters_05.mat';

camera_extrinsic_matrix = [ ...
1,   0,   0,   0; ...
0,   1,   0,   0; ...
0,   0,  -1,  100; ...
0,   0,   0,   1
];

CamRotateXRad = deg2rad(CamRotateXDeg);
CamRotateYRad = deg2rad(CamRotateYDeg);
camera_extrinsic_matrix = [ ...
1,                 0,               0,   0; ...
0,   cos(CamRotateXRad), sin(CamRotateXRad),   0; ...
0,  -sin(CamRotateXRad), cos(CamRotateXRad),   0; ...
0,                 0,               0,   1  ...
] * camera_extrinsic_matrix;
camera_extrinsic_matrix = [ ...
cos(CamRotateYRad),  0, sin(CamRotateYRad),  0; ...
              0,  1,               0,  0; ...
-sin(CamRotateYRad), 0, cos(CamRotateYRad),  0; ...
              0,  0,               0,  1  ...
] * camera_extrinsic_matrix;




camera_extrinsic_matrix = inv(camera_extrinsic_matrix);
camera_extrinsic_matrix = camera_extrinsic_matrix(1:3,:);

projector_extrinsic_matrix = [ ...
1,   0,   0,   0; ...
0,   1,   0,   0; ...
0,   0,   1,   0; ...
0,   0,   0,   1
];
projector_extrinsic_matrix = inv(projector_extrinsic_matrix);
projector_extrinsic_matrix = projector_extrinsic_matrix(1:3,:);

camera_w = 2 * tan(camera_fov_deg_w * pi / 360.0);
camera_h = 2 * tan(camera_fov_deg_h * pi / 360.0);
camera_flip_y = [ ...
1,  0, 0; ...
0, -1, 0; ...
0,  0, 1; ...
];
camera_intrinsic_matrix = [ ...
    (camera_res_w-1)/camera_w,                     0, (camera_res_w+1)*0.5; ...
                        0, (camera_res_h-1)/camera_h, (camera_res_h+1)*0.5; ...
                        0,                     0,                     1 ...
    ];
camera_intrinsic_matrix = camera_intrinsic_matrix * camera_flip_y;
% intrinsic_matrix converts real coordinate(x,y only) to code
projector_intrinsic_matrix = [ ...
proj_spacing,            0, -(proj_num_x*proj_spacing+1)/2; ...
           0, -proj_spacing, (proj_num_x*proj_spacing+1)/2; ...
           0,            0,                               1 ...
]; % this is code to real coordinate
projector_intrinsic_matrix = inv(projector_intrinsic_matrix);


save(fn, ...
        'projector_intrinsic_matrix', ...
        'projector_extrinsic_matrix', ...
        'camera_intrinsic_matrix', ...
        'camera_extrinsic_matrix')